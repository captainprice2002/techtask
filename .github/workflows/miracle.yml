name: Terraform Deployment

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main  

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-central-1  
      TF_VAR_profile: internebi  

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.5  

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/my-key
          chmod 600 ~/.ssh/my-key

      
  #    - name: Destroy infra
  #      run: teerraform destroy
       
      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Plan
        run: terraform plan
        id: plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        
      - name: Retrieve Instance IP
        run: |
          # Run terraform output and redirect any errors
          INSTANCE_IP=$(terraform output -raw instance_ip 2>error_log.txt | tr -d '\n\r')

          # Check if INSTANCE_IP is empty, log error if needed
          if [[ -z "$INSTANCE_IP" ]]; then
            echo "Failed to retrieve INSTANCE_IP. Check error_log.txt for details."
            cat error_log.txt
            exit 1
          else
            echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
            echo "Successfully set INSTANCE_IP to $INSTANCE_IP"
          fi

      - name: Display Instance IP for Debugging
        run: echo $INSTANCE_IP




        

